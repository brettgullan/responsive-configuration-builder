{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 39eb0f6887e238d43f78","webpack:///external \"ramda\"","webpack:///./src/config-builder.js","webpack:///./src/helpers.js","webpack:///./src/spec-builder.js","webpack:///./src/builder-factory.js","webpack:///./src/evaluate-ratio.js","webpack:///./src/token-expander.js","webpack:///./src/replace-tokens.js","webpack:///./src/token-resolver.js","webpack:///./src/token.js","webpack:///./src/cloudinary-expander.js","webpack:///./src/cloudinary-resolver.js","webpack:///./src/cloudinary.js","webpack:///external \"ramda-adjunct\""],"names":["buildResponsiveConfig","convertToNumberOrUndefined","Number","convertSizeArrayToObject","Array","buildDescriptor","handleSingleSpec","handleArraySpec","when","ratioCaseRegex","fractionalCaseRegex","evaluateRatio","candidate","ratio","result","expandSizeForScale","sc","expanded","sz","expandWidthForRatio","w","r","height","Math","width","replaceForKey","expandTokensUsing","expandTokenizedString","widths","resolutions","rest","cloudinary","aspectRatio","ar"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ResponsiveTools\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ResponsiveTools\"] = factory();\n\telse\n\t\troot[\"ResponsiveTools\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 39eb0f6887e238d43f78","module.exports = require(\"ramda\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ramda\"\n// module id = 0\n// module chunks = 0","import {\n  __,\n  compose,\n  cond,\n  curry,\n  equals,\n  identity,\n  is,\n  map,\n  mapObjIndexed,\n  merge,\n  T,\n} from 'ramda'\n\n//-----------------------------------------------------------------------------\n\n/**\n * Walk the specification to locate any URL-related 'spec objects' to resolve.\n *\n * Any `src`, `srcset` or similar fields are expanded and resolved into\n * the appropriate URL or URL/descriptor strings.\n *\n * @returns {Object} fully resolved responsive configuration object\n */\nconst buildResponsiveConfig = curry((builder, { options, ...spec }, image) =>\n  mapObjIndexed(\n    cond([\n      // Map over `sources` array, recursively calling this function to process.\n      [\n        (__, key) => equals('sources', key),\n        map(\n          compose(\n            buildResponsiveConfig(builder, __, image),\n            merge({ options }),\n          ),\n        ),\n      ],\n\n      // Process individual spec objects.\n      [\n        is(Object),\n        compose(\n          builder(image),\n          merge(options),\n        ),\n      ],\n\n      // Return all other spec values as-is.\n      [T, identity],\n    ]),\n  )(spec),\n)\n\n//-----------------------------------------------------------------------------\n\nexport default buildResponsiveConfig\n\n\n\n// WEBPACK FOOTER //\n// ./src/config-builder.js","import { always, compose, when, zipObj } from 'ramda'\n\n//-----------------------------------------------------------------------------\n\n/**\n * Convert size value to number.\n * Unparseable strings are converted to zero.\n *\n * @param {String|Number} size value to convert as string (or number)\n * @return {Number} size value parsed to number\n */\nexport const convertToNumberOrUndefined = compose(\n  when(Number.isNaN, always(undefined)),\n  parseFloat,\n)\n\n//-----------------------------------------------------------------------------\n\n/**\n * If sizes is supplied as a height/width array pair, convert to object.\n *\n * @param {Arary} size array as [width, height]\n * @return {Object} size object containing width and height k/v pairs\n */\nexport const convertSizeArrayToObject = when(\n  Array.isArray,\n  zipObj(['width', 'height']),\n)\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","import {\n  __,\n  always,\n  compose,\n  concat,\n  cond,\n  converge,\n  curry,\n  is,\n  isEmpty,\n  join,\n  map,\n  // tap,\n  when,\n} from 'ramda'\n\n//-----------------------------------------------------------------------------\n\nimport { convertToNumberOrUndefined } from './helpers'\n\n//-----------------------------------------------------------------------------\n\nconst buildDescriptor = ({ width }) => ` ${convertToNumberOrUndefined(width)}w`\n\n//-----------------------------------------------------------------------------\n\nexport default (expander, resolver) =>\n  curry((image, spec) => {\n    const handleSingleSpec = resolver(image)\n\n    const handleArraySpec = compose(\n      join(', '),\n      map(converge(concat, [handleSingleSpec, buildDescriptor])),\n    )\n\n    return compose(\n      // Return undefined (as error code) if final result is empty string\n      when(isEmpty, always(undefined)),\n\n      cond([\n        [is(Array), handleArraySpec],\n        //\n        [is(Object), handleSingleSpec],\n      ]),\n\n      // Expand all shorthand-format spec objects\n      expander,\n    )(spec)\n  })\n\n\n\n// WEBPACK FOOTER //\n// ./src/spec-builder.js","import configBuilder from './config-builder'\nimport specBuilder from './spec-builder'\n\n//-----------------------------------------------------------------------------\n\nexport default (expander, resolver) =>\n  configBuilder(specBuilder(expander, resolver))\n\n\n\n// WEBPACK FOOTER //\n// ./src/builder-factory.js","const ratioCaseRegex = /^(\\d+)\\s?:\\s?(\\d+)$/\nconst fractionalCaseRegex = /^(\\d+)\\s?\\/\\s?(\\d+)$/\n\n//-----------------------------------------------------------------------------\n\n/**\n * Convert common aspect-ratio expressions (width/height) into decimal values.\n * i.e:\n *    16/9 = 1.777*\n *    '16/9' = 1.777*\n *    '4:3' = 1.333*\n *    '56.25%' = 1.777*\n * Useful when calculating height based on a width and ratio.\n *\n * @param {Number|String} ratio\n * @return {Number} ratio expressed as decimal width/height\n */\nexport const evaluateRatio = (ratio) => {\n  if (!ratio) return undefined // sanity!\n\n  let candidate = Number(ratio)\n\n  // Anything that has dynamically resolved to a Number\n  // 16/9, 1.7777778, etc.\n  if (candidate) return candidate\n\n  candidate = ratio.toString().trim()\n\n  // percentage case\n  if (candidate.slice(-1) === '%') {\n    return 1 / (Number.parseFloat(candidate) / 100)\n  }\n\n  // ratio case (width:height)\n  if (ratioCaseRegex.test(candidate)) {\n    const result = ratioCaseRegex.exec(candidate)\n    return result[1] / result[2]\n  }\n\n  // fractional case (width/height)\n  if (fractionalCaseRegex.test(candidate)) {\n    const result = fractionalCaseRegex.exec(candidate)\n    return result[1] / result[2]\n  }\n\n  // wtf?\n  return undefined\n}\n\nexport default evaluateRatio\n\n\n\n// WEBPACK FOOTER //\n// ./src/evaluate-ratio.js","import { __, cond, map } from 'ramda'\n\n//-----------------------------------------------------------------------------\n\nimport { evaluateRatio } from './evaluate-ratio'\nimport { convertToNumberOrUndefined, convertSizeArrayToObject } from './helpers'\n\n//-----------------------------------------------------------------------------\n\nexport const expandSize = ({ width, height, ...options }) => ({\n  width: convertToNumberOrUndefined(width),\n  height: convertToNumberOrUndefined(height),\n  ...options,\n})\n\n//-----------------------------------------------------------------------------\n\nexport const expandSizeForScale = (size, scale, options) => {\n  const sc = convertToNumberOrUndefined(scale)\n  const expanded = map((v) => {\n    const sz = convertToNumberOrUndefined(v)\n    return sz && sc ? sz * sc : undefined\n  }, convertSizeArrayToObject(size))\n  return {\n    ...expanded,\n    ...options,\n  }\n}\n\nexport const expandSizesForScale = ({ size, scale, ...options }) =>\n  map((s) => expandSizeForScale(size, s, options), scale)\n\n//-----------------------------------------------------------------------------\n\nexport const expandWidthForRatio = (width, ratio, options) => {\n  const w = convertToNumberOrUndefined(width)\n  const r = evaluateRatio(ratio)\n\n  return {\n    width: w,\n    height: w && r ? Math.round(w / r) : undefined,\n    ...options,\n  }\n}\n\nexport const expandWidthsForRatio = ({ widths, ratio, ...options }) =>\n  map((width) => expandWidthForRatio(width, ratio, options), widths)\n\n//-----------------------------------------------------------------------------\n\nexport default cond([\n  [({ widths, ratio }) => widths && ratio, expandWidthsForRatio],\n  [({ size, scale }) => size && scale, expandSizesForScale],\n\n  [\n    ({ width, ratio }) => width && ratio,\n    ({ width, ratio, ...options }) =>\n      expandWidthForRatio(width, ratio, options),\n  ],\n  [({ width, height }) => width && height, expandSize],\n])\n\n\n\n// WEBPACK FOOTER //\n// ./src/token-expander.js","import {\n  call,\n  compose,\n  curry,\n  flip,\n  mapObjIndexed,\n  reduce,\n  replace,\n  values,\n} from 'ramda'\n\n//-----------------------------------------------------------------------------\n\n/**\n * A replacement function to apply to a template string.\n *\n * @param {String} val value used to replace token\n * @param {String} key token to replace with value\n * @return {Function} replacement function to apply to template\n */\nconst replaceForKey = (val, key) => replace(new RegExp(`\\{${key}\\}`, 'g'), val)\n\n/**\n * Build array of 'expander' functions for each key/value pair in tokens map.\n */\nconst expandTokensUsing = (resolver) =>\n  compose(\n    values,\n    mapObjIndexed(resolver),\n  )\n\n/**\n *\n * @param {String} template\n * @param {Object} tokens\n * @return {String} expanded template with all tokens replaced\n */\nconst expandTokenizedString = curry((template, tokens) =>\n  compose(\n    reduce(flip(call), template),\n    expandTokensUsing(replaceForKey),\n  )(tokens),\n)\n\nexport default expandTokenizedString\n\n\n\n// WEBPACK FOOTER //\n// ./src/replace-tokens.js","import { compose, curry, merge } from 'ramda'\n\n//-----------------------------------------------------------------------------\n\nimport replaceTokens from './replace-tokens'\n\n//-----------------------------------------------------------------------------\n\nexport default curry((template, image, spec) =>\n  compose(\n    replaceTokens(template),\n    merge(image),\n  )(spec),\n)\n\n\n\n// WEBPACK FOOTER //\n// ./src/token-resolver.js","import builderFactory from './builder-factory'\n\nimport tokenExpander from './token-expander'\nimport tokenResolver from './token-resolver'\n\n//-----------------------------------------------------------------------------\n\nexport default (template) =>\n  builderFactory(tokenExpander, tokenResolver(template))\n\n\n\n// WEBPACK FOOTER //\n// ./src/token.js","import { both, cond, identity, map, multiply, propIs, T } from 'ramda'\n\n//-----------------------------------------------------------------------------\n\nexport const expandWidths = ({ widths, ...rest }) =>\n  map((width) => ({ width, ...rest }))(widths)\n\n//-----------------------------------------------------------------------------\n\nexport const expandWidthsAndResolutions = ({\n  widths,\n  resolutions,\n  ...rest\n}) => {\n  const result = []\n  widths.forEach((width) =>\n    resolutions.forEach((resolution) => {\n      result.push({\n        width: multiply(width, resolution),\n        ...rest,\n      })\n    }),\n  )\n  return result\n}\n\n//-----------------------------------------------------------------------------\n\nexport default cond([\n  [\n    both(propIs(Array, 'widths'), propIs(Array, 'resolutions')),\n    expandWidthsAndResolutions,\n  ],\n  [propIs(Array, 'widths'), expandWidths],\n  [T, identity],\n])\n\n\n\n// WEBPACK FOOTER //\n// ./src/cloudinary-expander.js","import { __, compose, curry, evolve, merge } from 'ramda'\nimport { renameKeys } from 'ramda-adjunct'\n\n//-----------------------------------------------------------------------------\n\nimport { convertToNumberOrUndefined } from './helpers'\n\n//-----------------------------------------------------------------------------\n\nexport default curry((cloudinary, image, spec) =>\n  compose(\n    ({ id, ...options }) => cloudinary.url(id, options),\n    evolve({\n      width: convertToNumberOrUndefined,\n    }),\n    renameKeys({\n      ratio: 'aspect_ratio',\n      aspectRatio: 'aspect_ratio',\n      ar: 'aspect_ratio',\n    }),\n    merge(image),\n  )(spec),\n)\n\n\n\n// WEBPACK FOOTER //\n// ./src/cloudinary-resolver.js","import builderFactory from './builder-factory'\n\nimport cloudinaryExpander from './cloudinary-expander'\nimport cloudinaryResolver from './cloudinary-resolver'\n\n//-----------------------------------------------------------------------------\n\nexport default (cloudinary) =>\n  builderFactory(cloudinaryExpander, cloudinaryResolver(cloudinary))\n\n\n\n// WEBPACK FOOTER //\n// ./src/cloudinary.js","module.exports = require(\"ramda-adjunct\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ramda-adjunct\"\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}